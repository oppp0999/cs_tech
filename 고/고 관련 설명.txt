고루틴은 -> 경량된 쓰레드이다 함수를 따로 호출 할 수 있음
ex -> go sayhello() 를 사용하여 함수를 호출할 수 있다.
func main() {
    go sayHello()
    fmt.Println("main function")
}

func sayHello() {
    fmt.Println("hello world")
}
이 코드를 실행하면 "hello world" 문자열이 출력될 것입니다. 하지만 출력 순서는 보장되지 않습니다. sayHello 함수가 고루틴으로 실행되기 때문에, main 함수와 sayHello 함수가 병렬로 실행될 수 있기 때문입니다.

------------

채널(Channel)은 Go 언어에서 제공하는 동기화된 메시지 전달 기능입니다. 채널은 고루틴 간의 안전한 통신을 가능하게 해주는 중요한 요소입니다.

채널은 make 함수를 사용해서 생성할 수 있으며, chan 키워드를 사용하여 타입을 명시합니다. 예를 들어, int 타입의 값을 전달하는 채널을 생성하려면 아래와 같이 작성할 수 있습니다.

go
Copy code
ch := make(chan int)
채널은 send 연산과 receive 연산으로 값을 전달하고 받습니다. send 연산은 <- 연산자를 사용하여 값을 채널로 보내는 것이고, receive 연산은 채널에서 값을 받아오는 것입니다. 예를 들어, 아래의 코드는 ch 채널로 1을 보내고, 다시 x 변수에 저장합니다.

go
Copy code
ch := make(chan int)
go func() {
    ch <- 1
}()
x := <-ch
채널은 기본적으로 블로킹(Blocking) 동작을 합니다. 따라서, 값을 전달할 때 채널이 비어있으면, 값을 받을 때 채널에 값이 채워질 때까지 대기합니다. 이러한 블로킹 동작을 이용하여, 고루틴 간에 동기화된 작업을 수행할 수 있습니다.